# PASCAL BNF -> ALF
#
# This file contains the BNF-parse rules for a limited subset of PASCAL.
# For a legal and correct PASCAL program in the given subset, it will mostly
# behave the same. Maybe ;-)

# Capabilities
# - integer/real/string/char "types" and "values"
# - "strings" are used, should be 'foo'
# - "var" declare of single variable/init single variable
# - can define several functions/none
# - function only be named A-Z...
# - IF expr THEN stmts [ELSE stmt] supported
# - function call (in expressions, too)
# - setting var to expression a:=42+a;
# - expression operators: +-/* ()
# - logic: and not (TODO: or)
# - comparisions: = <> <= < >= >
# - global variables availble throught, can be shadowed by locals
# - "prepared" for scoped inner functions (TODO: not working yet)
# - write/writeln of single argument: constant string/expression
# - recursive function calls
# - Assign "Result:=42;" to set return value
# - "Exit;" functionality

# Limitations/Features:
# - (only integer/string constants)
# - no comments (TODO: preprocessing stage of parser?)
# - C style ; in IF statements, LOL. TODO: fix
# - (BUG: can have several VAR clauses, lol TODO: decl several vars)
# - VAR can be inited by function call result (can pascal?)
# - no type checking - use as scripting?
# - function arguments types not parsed...
# - non-existing functions == identity!
# - no procedure yet
# - setting an undeclared var creates a global
# - string stuff untested except for printing static strings
# - embryo for variable unlimited pascal strings includcing GC!

# TODO:
# - loops
# - read readln
# - label goto
# - get put assign reset seek close
# - new dispose (mark release)
# (- high low)

# Parsing Rules:
#   (free rule chars: ) none? LOL


# TODO: preprocess comments?

# TODO: these are needed, shouldn't be?
N=%n
D=%i

# TODO: pascal string is '...'
K=%s

# lowest level
U= D | F [$1] | N [$:1@] | \( E \) [$1]

# Multiplicative: * / div mod TODO: here? "and"
T= U \* T [$1 $2 *] | U \/ T [$1 $2 /] | U [$1]

# Additive: + - TODO: here? "or"
E= K [c$1] | T \+ E [$1 $2 +] | T \- E [$1 $2 -] | T [$1]

# Relational: = <> < > <= >= in
Z= = | <> [z] | <= [>z] | < | >= [<z] | >

# Logical negation: not
# TODO: E Z E may not work
C= E Z E [$1 $3 $2] | not C [$1~] | C and C [$1 $2 &]

# types...
Q= integer :t=i8 | char :t=c1 | string :t=s | real :t=r

# var...; var... ; lol TODO: only one, and many vars
V= var N\:Q=E; ::$1 V [$3 $:1! $4] | var N\:Q; V ::$1 [$3] |

# let
L= N\:=E :=$1 [$2 $:1!]

I= if C then S else S [$1?{$2}{$3}] | if C then S [$1?{$2} ]

M= write\(K\) [$1] | write\(E\) [$1.] | writeln\(K\) [$1cr] | writeln\(E\) [$1.cr]|

# formal arguments declaration
#   TODO: add types
W= ,H |
H= N W ::$1

# actual argument expression list
R= ,A [$1] |
A= E R [$1 $2] |

# function calls
#   TODO: long function call
#F= N\(A\) [($2) `$1@x]
#   BUG: calling non-existent fun
#        == idenity!!!
F= N\(A\) [$2$1]

# statement is
S= B [$1] | \Exit E; [^] | \Exit [^]; | \Result\:\=E; [$1] | result:=E; [$1] | M; [$1] | L; [$1] | I [$1] | repeat G until C [--REPEAT--] | while E do S [--WHILE--] | for N:=E to E [--FOR--] | for N:=E downto E [--FOR--] | F; [$1]

# BEGIN END grouping of statement
G= S G [$1 $2] | ; |
B= begin V G end [$1 $2]

# single function!
#   TODO: generalize
J= function N\(:E H\)\:Q B [:$1$#\$\$$4^; ] :X J [$5] |


# A program is...
#   TODO: not working with *V
#P= program N; *V B.%e ["$1:"cr$2 $3]
#P= program N; B.%e ["$1:"cr$2]

P= program N; J B.%e ["PROGRAM $1 running:"crcr$2 $3]

# Read rest as file inputs as one "chunk" and parse all as pascal!
*P
