# A simple C
#
# Math Preceedence Levels:
#
#   Unary postfix: [] () . -> ++ --
#   Unary prefix:  & * + - ! ~ ++ -- (type) sizeof
#   Multiplicative: * / %
#   Additive:    + -
#   Shift:       << >>
#   Relational:  < > <= >=
#   Equality:    == !=
#   Bitwise and: &
#   Bitwise xor: ^
#   Bitwise or:  |
#   Logical and: &&
#   Logical or:  ||
#   Conditional: ? :
#   Assignment:  = += -= *= /= %= <<= >>= &= ^= |=
#   Comma operator: ,

# types...
Q= long :t=i8 | int :t=i8 | char :t=c1 | string :t=s | float :t=r | double :t=r

# from tiny-c?
# TODO: make more similar to JS and PASCAL

O= ++ | --
X= I|*N[$1]|N.N|N->N|N $?O|$?O N
T= -X|+X|X
F= T\*T|T/T|T
M= F\+F [$1 $2 ] | F\-F [$1 $2 -] | F
R= ==|<=|<|>=|>|!=|>>|<<|<<<|>>>

L= E,L | E
E= N(L) | (E) [$1] | MRM [$1 $3 $2] | M
S= if(E) S $/ else S | while(E) S | do S while(E) | B | E
B= {$;S}
U= char|int|long|N
T= \*[I]|
V= AT N;
F= AT N(A)B
A= V,A | V
D= F|V
P= *D
